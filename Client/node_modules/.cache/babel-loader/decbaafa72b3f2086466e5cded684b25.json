{"ast":null,"code":"var _jsxFileName = \"/home/pradhant/caruso/panda-board/Client/src/Components/Board.js\";\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport DraggableList from \"./DraggableList\";\nimport Config from \"../Configuration\";\nimport { UpdateData } from \"./PDFDocument\";\nconst KNames = [\"Good\", \"Bad\", \"Ugly\"];\n\nfunction reorder(list, startIndex, endIndex) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\nfunction move(source, destination, droppableSource, droppableDestination) {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n} // Fucntional object\n\n\nconst Board = forwardRef((props, ref) => {\n  props.onVotingChange(Config.getTeamName(), Config.getSprintName());\n  let [boardItemsGood, setBoardItemsGood] = useState([]);\n  let [boardItemsBad, setBoardItemsBad] = useState([]);\n  let [boardItemsUgly, setBoardItemsUgly] = useState([]);\n  let [settings, setSettings] = useState([]);\n  const boardItems = {\n    Good: boardItemsGood,\n    Bad: boardItemsBad,\n    Ugly: boardItemsUgly\n  };\n  const name2setItems = {\n    Good: setBoardItemsGood,\n    Bad: setBoardItemsBad,\n    Ugly: setBoardItemsUgly\n  };\n  useImperativeHandle(ref, () => ({\n    update(sortType) {\n      var jsonObj = {\n        team: Config.getTeamName(),\n        sprint: Config.getSprintName(),\n        criteria: sortType\n      };\n      Config.getAxiosInstance().post(\"setSortingCriteria\", jsonObj).then(() => {\n        updateBoard(sortType, false);\n      }).catch(error => {\n        alert(\"failed to udpate sorting criteria !!! try again\");\n      });\n    }\n\n  }));\n  useEffect(updateBoard, []);\n\n  function updateBoard(props, sortType, fetchSortingCriteria) {\n    if (false === fetchSortingCriteria) {\n      populateBoard(sortType);\n    } else {\n      let reqData = {\n        params: {\n          team: Config.getTeamName(),\n          sprint: Config.getSprintName()\n        }\n      };\n      Config.getAxiosInstance().get(\"getSortingCriteria\", reqData).then(res => {\n        populateBoard(res.data[0]);\n      }).catch(error => {\n        alert(\"failed to get sorting criteria!!! try again\");\n      });\n    }\n  }\n\n  function populateBoard(sortingType) {\n    var url = window.location.href.replace(/^.*\\/\\/[^/]+/, \"\");\n    Config.getAxiosInstance().get(url).then(res => {\n      const board = res.data.items.sort((a, b) => {\n        if (sortingType === \"vote\") {\n          return b.votes - a.votes;\n        } else {\n          return false;\n        }\n      });\n      setSettings(res.data.settings);\n      name2setItems[\"Good\"](board.filter(item => item.type === \"Good\"));\n      name2setItems[\"Bad\"](board.filter(item => item.type === \"Bad\"));\n      name2setItems[\"Ugly\"](board.filter(item => item.type === \"Ugly\"));\n      UpdateData(board.filter(item => item.type === \"Good\"), board.filter(item => item.type === \"Bad\"), board.filter(item => item.type === \"Ugly\"), res.data.settings);\n    });\n  }\n\n  function getColumns(nameArray) {\n    return nameArray.map(name => /*#__PURE__*/React.createElement(DraggableList, {\n      key: name,\n      name: name,\n      displayName: !settings ? name : settings[name],\n      items: boardItems[name],\n      onBoardUpdate: updateBoard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  function onDragEnd(result) {\n    const {\n      source,\n      destination\n    } = result; //dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    Config.getAxiosInstance().post(\"/moveacrosscolumn\", {\n      _id: boardItems[source.droppableId][source.index]._id,\n      type: destination.droppableId //index: destination.index\n\n    }).then(updateBoard);\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(boardItems[source.droppableId], source.index, destination.index);\n      name2setItems[source.droppableId](items);\n    } else {\n      const result = move(boardItems[source.droppableId], boardItems[destination.droppableId], source, destination);\n      name2setItems[source.droppableId](result[source.droppableId]);\n      name2setItems[destination.droppableId](result[destination.droppableId]);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, \" \", getColumns(KNames), \" \");\n});\nexport default Board;","map":{"version":3,"sources":["/home/pradhant/caruso/panda-board/Client/src/Components/Board.js"],"names":["React","useState","useEffect","forwardRef","useImperativeHandle","DragDropContext","DraggableList","Config","UpdateData","KNames","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","Board","props","ref","onVotingChange","getTeamName","getSprintName","boardItemsGood","setBoardItemsGood","boardItemsBad","setBoardItemsBad","boardItemsUgly","setBoardItemsUgly","settings","setSettings","boardItems","Good","Bad","Ugly","name2setItems","update","sortType","jsonObj","team","sprint","criteria","getAxiosInstance","post","then","updateBoard","catch","error","alert","fetchSortingCriteria","populateBoard","reqData","params","get","res","data","sortingType","url","window","location","href","replace","board","items","sort","a","b","votes","filter","item","type","getColumns","nameArray","map","name","onDragEnd","_id"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport DraggableList from \"./DraggableList\";\nimport Config from \"../Configuration\";\nimport { UpdateData } from \"./PDFDocument\";\n\nconst KNames = [\"Good\", \"Bad\", \"Ugly\"];\n\nfunction reorder(list, startIndex, endIndex) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n\nfunction move(source, destination, droppableSource, droppableDestination) {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n}\n\n// Fucntional object\nconst Board = forwardRef((props, ref) => {\n\n  props.onVotingChange(Config.getTeamName(), Config.getSprintName());\n\n  let [boardItemsGood, setBoardItemsGood] = useState([]);\n  let [boardItemsBad, setBoardItemsBad] = useState([]);\n  let [boardItemsUgly, setBoardItemsUgly] = useState([]);\n  let [settings, setSettings] = useState([]);\n\n  const boardItems = {\n    Good: boardItemsGood,\n    Bad: boardItemsBad,\n    Ugly: boardItemsUgly,\n  };\n\n  const name2setItems = {\n    Good: setBoardItemsGood,\n    Bad: setBoardItemsBad,\n    Ugly: setBoardItemsUgly,\n  };\n\n  useImperativeHandle(ref, () => ({\n\n    update(sortType) {\n      var jsonObj = {\n        team: Config.getTeamName(),\n        sprint: Config.getSprintName(),\n        criteria: sortType\n      }\n\n      Config.getAxiosInstance()\n        .post(\"setSortingCriteria\", jsonObj)\n        .then(() => {\n          updateBoard(sortType, false);\n        })\n        .catch((error) => {\n          alert(\"failed to udpate sorting criteria !!! try again\");\n        });\n    }\n  }));\n\n  useEffect(updateBoard, []);\n\n  function updateBoard(props, sortType, fetchSortingCriteria) {\n\n    if (false === fetchSortingCriteria) {\n      populateBoard(sortType);\n    }\n    else {\n      let reqData = {\n        params: {\n          team: Config.getTeamName(),\n          sprint: Config.getSprintName(),\n        },\n      };\n\n      Config.getAxiosInstance().get(\n        \"getSortingCriteria\",\n        reqData\n      ).then(res => {\n        populateBoard(res.data[0]);\n      }).catch(error => {\n        alert(\"failed to get sorting criteria!!! try again\");\n      });\n    }\n  }\n\n  function populateBoard(sortingType) {\n    var url = window.location.href.replace(/^.*\\/\\/[^/]+/, \"\");\n    Config.getAxiosInstance()\n      .get(url)\n      .then((res) => {\n        const board = res.data.items.sort((a, b) => {\n          if (sortingType === \"vote\") {\n            return b.votes - a.votes;\n          } else {\n            return false;\n          }\n\n        });\n        setSettings(res.data.settings);\n        name2setItems[\"Good\"](board.filter((item) => item.type === \"Good\"));\n        name2setItems[\"Bad\"](board.filter((item) => item.type === \"Bad\"));\n        name2setItems[\"Ugly\"](board.filter((item) => item.type === \"Ugly\"));\n        UpdateData(\n          board.filter((item) => item.type === \"Good\"),\n          board.filter((item) => item.type === \"Bad\"),\n          board.filter((item) => item.type === \"Ugly\"),\n          res.data.settings\n        );\n      });\n  }\n\n  function getColumns(nameArray) {\n    return nameArray.map((name) => (\n      <DraggableList\n        key={name}\n        name={name}\n        displayName={!settings ? name : settings[name]}\n        items={boardItems[name]}\n        onBoardUpdate={updateBoard}\n      />\n    ));\n  }\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    //dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    Config.getAxiosInstance()\n      .post(\"/moveacrosscolumn\", {\n        _id: boardItems[source.droppableId][source.index]._id,\n        type: destination.droppableId,\n        //index: destination.index\n      })\n      .then(updateBoard);\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        boardItems[source.droppableId],\n        source.index,\n        destination.index\n      );\n      name2setItems[source.droppableId](items);\n    } else {\n      const result = move(\n        boardItems[source.droppableId],\n        boardItems[destination.droppableId],\n        source,\n        destination\n      );\n      name2setItems[source.droppableId](result[source.droppableId]);\n      name2setItems[destination.droppableId](result[destination.droppableId]);\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      {\" \"}\n      {getColumns(KNames)}{\" \"}\n    </DragDropContext>\n  );\n});\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}