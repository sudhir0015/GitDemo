{"ast":null,"code":"var _jsxFileName = \"/home/pradhant/caruso/panda-board/Client/src/Components/Chart.js\";\nimport React, { Component } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport Select from \"react-select\";\nimport Config from \"../Configuration\";\nconst teamNameToIgnore = \"http:\";\nconst statusComplete = \"complete\";\nconst statusLoading = \"loading\";\nconst statusStart = \"start\";\nconst statusIncomplete = \"incomplete\";\nvar invalidVelocityDataCount = 0;\nvar invalidHappinessDataCount = 0;\nvar currentPISelectedValue = -1;\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      let sprints = await this.props.sprints;\n      this.setState({\n        sprints: sprints\n      });\n      let teamName = this.props.teamName;\n      this.updatePIList(teamName, sprints);\n      this.updateHapinessList(teamName, sprints);\n      this.updateVelocityList(teamName, sprints);\n    };\n\n    this.handleSelection = async selectedOption => {\n      // show all the data without filter\n      if (currentPISelectedValue !== selectedOption.value) {\n        if (selectedOption.value === -1) {\n          let sprints = await this.props.sprints;\n          this.updateVelocityList(this.props.teamName, sprints);\n        } else {\n          let reqData = {\n            params: {\n              team: this.props.teamName,\n              pi: selectedOption.value\n            }\n          };\n          Config.getAxiosInstance().get(\"getSprintsForAPI\", reqData).then(sprints => {\n            this.updateVelocityList(this.props.teamName, sprints.data);\n          });\n        }\n\n        currentPISelectedValue = selectedOption.value;\n      }\n    };\n\n    this.getAvgHappiness = async reqData => {\n      let result = await Config.getAxiosInstance().get(\"getAvgHappinessForASprint\", reqData);\n      return result.data.average;\n    };\n\n    this.getSPInfoForASprint = async reqData => {\n      let result = await Config.getAxiosInstance().get(\"getVelocityForSprint\", reqData);\n      return result.data[0];\n    };\n\n    this.updatePIList = async teamName => {\n      if (teamName !== teamNameToIgnore) {\n        let reqData = {\n          params: {\n            team: teamName\n          }\n        };\n        let temp = {\n          value: -1,\n          label: \"ALL\"\n        };\n        this.state.pis.push(temp);\n        Config.getAxiosInstance().get(\"getPIListForATeam\", reqData).then(pis => {\n          pis.data.forEach(pi => {\n            let temp = {\n              value: pi,\n              label: \"PI_\" + pi\n            };\n            this.state.pis.push(temp);\n          });\n        }).then(() => {\n          if (this.state.pis.length > 1) {\n            this.SortPIList();\n            this.setState({\n              isPIsLoaded: statusComplete\n            });\n          }\n        });\n      }\n    };\n\n    this.updateVelocityList = async (teamName, sprints) => {\n      if (teamName !== teamNameToIgnore && sprints.length) {\n        this.cleanUP();\n        invalidVelocityDataCount = 0;\n        this.setState({\n          isVelocityLoaded: statusLoading\n        });\n        sprints.forEach(async (sprint, index) => {\n          let reqObj = {\n            params: {\n              team: teamName,\n              sprint: sprint\n            }\n          };\n          let spInfo = await this.getSPInfoForASprint(reqObj); // dataset[0] -> average\n          // dataset[1] -> SP Planned\n          // dataset[2] -> SP Burned\n          // dataset[3] -> BB Accuracy\n\n          if (spInfo && spInfo.spPlanned > 0) {\n            // check if a new PI is added\n            const found = this.state.pis.some(el => el.value === spInfo.pi);\n\n            if (!found) {\n              let temp = {\n                value: spInfo.pi,\n                label: \"PI_\" + spInfo.pi\n              };\n              this.state.pis.push(temp);\n              this.SortPIList();\n              this.setState({\n                isPIsLoaded: statusComplete\n              });\n            }\n\n            let Velocity = JSON.parse(JSON.stringify(this.state.Velocity));\n            Velocity.options.labels[index] = sprint;\n            Velocity.options.scales.xAxes[0].labels[index] = sprint;\n            Velocity.datasets[1].data[index] = spInfo.spPlanned;\n            Velocity.datasets[2].data[index] = spInfo.spBurnt;\n            Velocity.datasets[3].data[index] = spInfo.bbAccuracy;\n            this.setState({\n              Velocity: Velocity\n            });\n          } else {\n            invalidVelocityDataCount++;\n          }\n\n          if (sprints.length && invalidVelocityDataCount !== sprints.length && sprints.length === this.state.Velocity.datasets[2].data.filter(Boolean).length + invalidVelocityDataCount) {\n            let Velocity = JSON.parse(JSON.stringify(this.state.Velocity)); // remove empty element if any. Empty element is due to some sprints not having SP info. This is to align the array\n\n            Velocity.options.scales.xAxes[0].labels = Velocity.options.labels = Velocity.options.labels.filter(function (el) {\n              return el != null;\n            });\n            Velocity.datasets[1].data = Velocity.datasets[1].data.filter(function (el) {\n              return el != null;\n            });\n            Velocity.datasets[2].data = Velocity.datasets[2].data.filter(function (el) {\n              return el != null;\n            });\n            Velocity.datasets[3].data = Velocity.datasets[3].data.filter(function (el) {\n              return el != null;\n            });\n            this.setState({\n              Velocity: Velocity\n            });\n            this.state.Velocity.options.labels.forEach((sprint, index) => {\n              let avgVelocity = 0;\n              let totalSPBurnt = 0;\n\n              for (let startIndex = 0; startIndex <= index; startIndex++) {\n                totalSPBurnt += parseInt(this.state.Velocity.datasets[2].data[startIndex], 10);\n              }\n\n              avgVelocity = parseFloat(totalSPBurnt / (index + 1)).toFixed(2);\n              let Velocity = JSON.parse(JSON.stringify(this.state.Velocity));\n              Velocity.datasets[0].data[index] = avgVelocity;\n              this.setState({\n                Velocity: Velocity\n              });\n            });\n            this.setState({\n              isVelocityLoaded: statusComplete\n            });\n          } else if (invalidVelocityDataCount === sprints.length) {\n            this.setState({\n              isVelocityLoaded: statusIncomplete\n            });\n          }\n        });\n      }\n    };\n\n    this.updateHapinessList = async (teamName, sprints) => {\n      if (teamName !== teamNameToIgnore && sprints.length) {\n        invalidHappinessDataCount = 0;\n        sprints.forEach(async (sprint, index) => {\n          this.setState({\n            isHappinessLoaded: statusLoading\n          });\n          let jsonObj = {\n            params: {\n              team: teamName,\n              sprint: sprint\n            }\n          };\n          let happiness = await this.getAvgHappiness(jsonObj);\n\n          if (!isNaN(happiness)) {\n            let Happiness = JSON.parse(JSON.stringify(this.state.Happiness));\n            Happiness.labels[index] = sprint;\n            Happiness.datasets[0].data[index] = happiness;\n            this.setState({\n              Happiness: Happiness\n            });\n          } else {\n            invalidHappinessDataCount++;\n          }\n\n          if (sprints.length && sprints.length !== invalidHappinessDataCount && sprints.length === this.state.Happiness.datasets[0].data.filter(Boolean).length + invalidHappinessDataCount) {\n            // this is to remove null from the array\n            let Happiness = JSON.parse(JSON.stringify(this.state.Happiness));\n            Happiness.labels = Happiness.labels.filter(function (el) {\n              return el != null;\n            }); // this is to remove null from the array\n\n            Happiness.datasets[0].data = Happiness.datasets[0].data.filter(function (el) {\n              return el != null;\n            });\n            Happiness.labels.forEach((sprint, curIndex) => {\n              let liveAvgHappiness = 0;\n              let sumHappiness = 0;\n\n              for (let startIndex = 0; startIndex <= curIndex; startIndex++) {\n                sumHappiness += parseFloat(Happiness.datasets[0].data[startIndex], 10);\n              }\n\n              liveAvgHappiness = parseFloat(sumHappiness / (curIndex + 1)).toFixed(2);\n              Happiness.datasets[1].data[curIndex] = liveAvgHappiness;\n            });\n            this.setState({\n              Happiness: Happiness\n            });\n            this.setState({\n              isHappinessLoaded: statusComplete\n            });\n          } else if (sprints.length === invalidHappinessDataCount) {\n            this.setState({\n              isHappinessLoaded: statusIncomplete\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      pis: [],\n      selectedOption: null,\n      isPIsLoaded: statusStart,\n      sprints: [],\n      Happiness: {\n        labels: [],\n        datasets: [{\n          label: \"Happiness\",\n          type: \"line\",\n          fill: false,\n          backgroundColor: \"red\",\n          borderColor: \"purple\",\n          pointHitRadius: 10,\n          data: [] // avg happiness per sprint\n\n        }, {\n          label: \"Live Average\",\n          type: \"line\",\n          fill: false,\n          borderCapStyle: \"square\",\n          backgroundColor: \"blue\",\n          pointBorderColor: \"blue\",\n          borderColor: \"orange\",\n          borderDash: [12, 5],\n          pointHitRadius: 10,\n          pointStyle: \"rectRounded\",\n          data: [] // live avg happiness\n\n        }],\n        options: {\n          responsive: true,\n          tooltips: {\n            mode: \"label\"\n          },\n          title: {\n            display: true,\n            text: \"Happiness Trend For \" + '\"' + this.props.teamName + '\"',\n            fontFamily: \"Roboto\",\n            fontSize: 15\n          },\n          scales: {\n            yAxes: [{\n              ticks: {// suggestedMin: 2,\n              }\n            }]\n          },\n          maintainAspectRatio: false\n        },\n        isHappinessLoaded: statusStart\n      },\n      Velocity: {\n        datasets: [{\n          label: \"Live Average\",\n          type: \"line\",\n          data: [],\n          // average to be computed\n          fill: false,\n          borderColor: \"#71B34A\",\n          backgroundColor: \"#71B34A\",\n          pointBorderColor: \"#71B34A\",\n          pointBackgroundColor: \"#71B34A\",\n          pointHoverBackgroundColor: \"#71B34A\",\n          pointHoverBorderColor: \"#71B34A\",\n          borderDash: [12, 5],\n          yAxisID: \"y-axis-1\"\n        }, {\n          type: \"bar\",\n          label: \"SP Commited\",\n          data: [],\n          // sp planned fetched from database\n          fill: false,\n          backgroundColor: \"grey\",\n          borderColor: \"grey\",\n          hoverBackgroundColor: \"grey\",\n          hoverBorderColor: \"grey\",\n          yAxisID: \"y-axis-1\"\n        }, {\n          type: \"bar\",\n          label: \"SP Burned\",\n          data: [],\n          // sp burned fetched from database\n          fill: false,\n          backgroundColor: \"#51A37D\",\n          borderColor: \"#51A37D\",\n          hoverBackgroundColor: \"#51A37D\",\n          hoverBorderColor: \"#51A37D\",\n          yAxisID: \"y-axis-1\"\n        }, {\n          type: \"line\",\n          data: [],\n          // Bug buffer accuracy\n          label: \"BB Accuracy (%)\",\n          yAxisID: \"y-axis-2\",\n          pointRadius: 0,\n          showLine: false\n        }],\n        options: {\n          responsive: true,\n          title: {\n            display: true,\n            text: \"Velocity Trend For \" + '\"' + this.props.teamName + '\"',\n            fontFamily: \"Roboto\",\n            fontSize: 15\n          },\n          labels: [],\n          // this is the sprint list\n          tooltips: {\n            mode: \"label\"\n          },\n          elements: {\n            line: {\n              fill: false\n            }\n          },\n          scales: {\n            xAxes: [{\n              display: true,\n              ticks: {\n                suggestedMin: 0,\n                maxTicksLimit: 20\n              },\n              gridLines: {\n                display: false\n              },\n              labels: [] // this is the sprint list\n\n            }],\n            yAxes: [{\n              type: \"linear\",\n              display: true,\n              ticks: {\n                suggestedMin: 0,\n                maxTicksLimit: 10\n              },\n              position: \"left\",\n              id: \"y-axis-1\",\n              gridLines: {\n                display: false\n              },\n              labels: {\n                show: true\n              }\n            }, {\n              type: \"linear\",\n              display: false,\n              ticks: {\n                suggestedMin: 0,\n                maxTicksLimit: 20\n              },\n              position: \"right\",\n              id: \"y-axis-2\",\n              gridLines: {\n                display: false\n              },\n              labels: {\n                show: false\n              }\n            }]\n          }\n        },\n        isVelocityLoaded: statusStart\n      }\n    };\n  }\n\n  SortPIList() {\n    let piList = JSON.parse(JSON.stringify(this.state.pis));\n    piList = piList.sort(function (a, b) {\n      return a.value - b.value;\n    });\n    this.setState({\n      pis: piList\n    });\n  }\n\n  cleanUP() {\n    // this is safe in this case because we are not using state to render\n    this.state.Velocity.options.labels.length = 0;\n    this.state.Velocity.datasets[0].data.length = 0;\n    this.state.Velocity.datasets[1].data.length = 0;\n    this.state.Velocity.datasets[2].data.length = 0;\n  }\n\n  DecideTheText() {\n    if (this.props.teamName === teamNameToIgnore) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 9\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }\n      }, \" Select A Team To Proceed \"), \" \");\n    } else if (this.props.teamName !== teamNameToIgnore && !this.state.sprints.length) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 9\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }\n      }, \" Create Sprint To Proceed \"), \" \");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 13\n      }\n    }, \" \", this.state.isHappinessLoaded === statusComplete ? /*#__PURE__*/React.createElement(Line, {\n      ref: \"chart\",\n      data: this.state.Happiness,\n      height: 300,\n      options: this.state.Happiness.options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 17\n      }\n    }) : this.state.isHappinessLoaded === statusIncomplete ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 19\n      }\n    }, \" No Sprint With Valid Happiness Information \"), \" \") : this.state.isHappinessLoaded === statusLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 19\n      }\n    }, \" Happiness Trend Is Loading... \"), \" \") : this.DecideTheText(), \" \"), \" \"), \" \", /*#__PURE__*/React.createElement(Col, {\n      lg: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 11\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 13\n      }\n    }, \" \", this.state.isVelocityLoaded === statusComplete ? /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.Velocity,\n      options: this.state.Velocity.options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }) : this.state.isVelocityLoaded === statusIncomplete ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 19\n      }\n    }, \" No Sprint With Valid SP Data \"), \" \") : this.state.isVelocityLoaded === statusLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 19\n      }\n    }, \" Velocity Chart Loading... \"), \" \") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }\n    }, \" \", \" \"), \" \"), \" \", this.state.isPIsLoaded === statusComplete ? /*#__PURE__*/React.createElement(Select, {\n      placeholder: \"Select PI To Filter\",\n      value: this.selectedOption,\n      onChange: this.handleSelection,\n      options: this.state.pis,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 15\n      }\n    }, \" \", \" \"), \" \"), \" \"), \" \");\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/home/pradhant/caruso/panda-board/Client/src/Components/Chart.js"],"names":["React","Component","Col","Container","Row","Bar","Line","Select","Config","teamNameToIgnore","statusComplete","statusLoading","statusStart","statusIncomplete","invalidVelocityDataCount","invalidHappinessDataCount","currentPISelectedValue","Chart","constructor","props","componentDidMount","sprints","setState","teamName","updatePIList","updateHapinessList","updateVelocityList","handleSelection","selectedOption","value","reqData","params","team","pi","getAxiosInstance","get","then","data","getAvgHappiness","result","average","getSPInfoForASprint","temp","label","state","pis","push","forEach","length","SortPIList","isPIsLoaded","cleanUP","isVelocityLoaded","sprint","index","reqObj","spInfo","spPlanned","found","some","el","Velocity","JSON","parse","stringify","options","labels","scales","xAxes","datasets","spBurnt","bbAccuracy","filter","Boolean","avgVelocity","totalSPBurnt","startIndex","parseInt","parseFloat","toFixed","isHappinessLoaded","jsonObj","happiness","isNaN","Happiness","curIndex","liveAvgHappiness","sumHappiness","type","fill","backgroundColor","borderColor","pointHitRadius","borderCapStyle","pointBorderColor","borderDash","pointStyle","responsive","tooltips","mode","title","display","text","fontFamily","fontSize","yAxes","ticks","maintainAspectRatio","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","hoverBackgroundColor","hoverBorderColor","pointRadius","showLine","elements","line","suggestedMin","maxTicksLimit","gridLines","position","id","show","piList","sort","a","b","DecideTheText","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport Select from \"react-select\";\n\nimport Config from \"../Configuration\";\n\nconst teamNameToIgnore = \"http:\";\nconst statusComplete = \"complete\";\nconst statusLoading = \"loading\";\nconst statusStart = \"start\";\nconst statusIncomplete = \"incomplete\";\n\nvar invalidVelocityDataCount = 0;\nvar invalidHappinessDataCount = 0;\nvar currentPISelectedValue = -1;\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pis: [],\n      selectedOption: null,\n      isPIsLoaded: statusStart,\n      sprints: [],\n      Happiness: {\n        labels: [],\n        datasets: [\n          {\n            label: \"Happiness\",\n            type: \"line\",\n            fill: false,\n            backgroundColor: \"red\",\n            borderColor: \"purple\",\n            pointHitRadius: 10,\n            data: [], // avg happiness per sprint\n          },\n          {\n            label: \"Live Average\",\n            type: \"line\",\n            fill: false,\n            borderCapStyle: \"square\",\n            backgroundColor: \"blue\",\n            pointBorderColor: \"blue\",\n            borderColor: \"orange\",\n            borderDash: [12, 5],\n            pointHitRadius: 10,\n            pointStyle: \"rectRounded\",\n            data: [], // live avg happiness\n          },\n        ],\n        options: {\n          responsive: true,\n          tooltips: {\n            mode: \"label\",\n          },\n          title: {\n            display: true,\n            text: \"Happiness Trend For \" + '\"' + this.props.teamName + '\"',\n            fontFamily: \"Roboto\",\n            fontSize: 15,\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  // suggestedMin: 2,\n                },\n              },\n            ],\n          },\n          maintainAspectRatio: false,\n        },\n        isHappinessLoaded: statusStart,\n      },\n      Velocity: {\n        datasets: [\n          {\n            label: \"Live Average\",\n            type: \"line\",\n            data: [], // average to be computed\n            fill: false,\n            borderColor: \"#71B34A\",\n            backgroundColor: \"#71B34A\",\n            pointBorderColor: \"#71B34A\",\n            pointBackgroundColor: \"#71B34A\",\n            pointHoverBackgroundColor: \"#71B34A\",\n            pointHoverBorderColor: \"#71B34A\",\n            borderDash: [12, 5],\n            yAxisID: \"y-axis-1\",\n          },\n          {\n            type: \"bar\",\n            label: \"SP Commited\",\n            data: [], // sp planned fetched from database\n            fill: false,\n            backgroundColor: \"grey\",\n            borderColor: \"grey\",\n            hoverBackgroundColor: \"grey\",\n            hoverBorderColor: \"grey\",\n            yAxisID: \"y-axis-1\",\n          },\n          {\n            type: \"bar\",\n            label: \"SP Burned\",\n            data: [], // sp burned fetched from database\n            fill: false,\n            backgroundColor: \"#51A37D\",\n            borderColor: \"#51A37D\",\n            hoverBackgroundColor: \"#51A37D\",\n            hoverBorderColor: \"#51A37D\",\n            yAxisID: \"y-axis-1\",\n          },\n          {\n            type: \"line\",\n            data: [], // Bug buffer accuracy\n            label: \"BB Accuracy (%)\",\n            yAxisID: \"y-axis-2\",\n            pointRadius: 0,\n            showLine: false,\n          },\n        ],\n        options: {\n          responsive: true,\n          title: {\n            display: true,\n            text: \"Velocity Trend For \" + '\"' + this.props.teamName + '\"',\n            fontFamily: \"Roboto\",\n            fontSize: 15,\n          },\n          labels: [], // this is the sprint list\n          tooltips: {\n            mode: \"label\",\n          },\n          elements: {\n            line: {\n              fill: false,\n            },\n          },\n\n          scales: {\n            xAxes: [\n              {\n                display: true,\n                ticks: { suggestedMin: 0, maxTicksLimit: 20 },\n                gridLines: {\n                  display: false,\n                },\n                labels: [], // this is the sprint list\n              },\n            ],\n            yAxes: [\n              {\n                type: \"linear\",\n                display: true,\n                ticks: {\n                  suggestedMin: 0,\n                  maxTicksLimit: 10,\n                },\n                position: \"left\",\n                id: \"y-axis-1\",\n                gridLines: {\n                  display: false,\n                },\n                labels: {\n                  show: true,\n                },\n              },\n              {\n                type: \"linear\",\n                display: false,\n                ticks: { suggestedMin: 0, maxTicksLimit: 20 },\n                position: \"right\",\n                id: \"y-axis-2\",\n                gridLines: {\n                  display: false,\n                },\n                labels: {\n                  show: false,\n                },\n              },\n            ],\n          },\n        },\n        isVelocityLoaded: statusStart,\n      },\n    };\n  }\n\n  componentDidMount = async () => {\n    let sprints = await this.props.sprints;\n    this.setState({ sprints: sprints });\n    let teamName = this.props.teamName;\n    this.updatePIList(teamName, sprints);\n    this.updateHapinessList(teamName, sprints);\n    this.updateVelocityList(teamName, sprints);\n  };\n\n  handleSelection = async (selectedOption) => {\n    // show all the data without filter\n    if (currentPISelectedValue !== selectedOption.value) {\n      if (selectedOption.value === -1) {\n        let sprints = await this.props.sprints;\n        this.updateVelocityList(this.props.teamName, sprints);\n      } else {\n        let reqData = {\n          params: {\n            team: this.props.teamName,\n            pi: selectedOption.value,\n          },\n        };\n\n        Config.getAxiosInstance()\n          .get(\"getSprintsForAPI\", reqData)\n          .then((sprints) => {\n            this.updateVelocityList(this.props.teamName, sprints.data);\n          });\n      }\n\n      currentPISelectedValue = selectedOption.value;\n    }\n  };\n\n  getAvgHappiness = async (reqData) => {\n    let result = await Config.getAxiosInstance().get(\n      \"getAvgHappinessForASprint\",\n      reqData\n    );\n    return result.data.average;\n  };\n\n  getSPInfoForASprint = async (reqData) => {\n    let result = await Config.getAxiosInstance().get(\n      \"getVelocityForSprint\",\n      reqData\n    );\n\n    return result.data[0];\n  };\n\n  updatePIList = async (teamName) => {\n    if (teamName !== teamNameToIgnore) {\n      let reqData = {\n        params: {\n          team: teamName,\n        },\n      };\n      let temp = {\n        value: -1,\n        label: \"ALL\",\n      };\n\n      this.state.pis.push(temp);\n      Config.getAxiosInstance()\n        .get(\"getPIListForATeam\", reqData)\n        .then((pis) => {\n          pis.data.forEach((pi) => {\n            let temp = {\n              value: pi,\n              label: \"PI_\" + pi,\n            };\n\n            this.state.pis.push(temp);\n          });\n        })\n        .then(() => {\n          if (this.state.pis.length > 1) {\n            this.SortPIList();\n            this.setState({ isPIsLoaded: statusComplete });\n          }\n        });\n    }\n  };\n\n  SortPIList() {\n    let piList = JSON.parse(JSON.stringify(this.state.pis));\n    piList = piList.sort(function (a, b) {\n      return a.value - b.value;\n    });\n\n    this.setState({\n      pis: piList,\n    });\n  }\n\n  cleanUP() {\n    // this is safe in this case because we are not using state to render\n    this.state.Velocity.options.labels.length = 0;\n    this.state.Velocity.datasets[0].data.length = 0;\n    this.state.Velocity.datasets[1].data.length = 0;\n    this.state.Velocity.datasets[2].data.length = 0;\n  }\n\n  updateVelocityList = async (teamName, sprints) => {\n    if (teamName !== teamNameToIgnore && sprints.length) {\n      this.cleanUP();\n      invalidVelocityDataCount = 0;\n      this.setState({ isVelocityLoaded: statusLoading });\n\n      sprints.forEach(async (sprint, index) => {\n        let reqObj = {\n          params: {\n            team: teamName,\n            sprint: sprint,\n          },\n        };\n\n        let spInfo = await this.getSPInfoForASprint(reqObj);\n\n        // dataset[0] -> average\n        // dataset[1] -> SP Planned\n        // dataset[2] -> SP Burned\n        // dataset[3] -> BB Accuracy\n\n        if (spInfo && spInfo.spPlanned > 0) {\n          // check if a new PI is added\n          const found = this.state.pis.some((el) => el.value === spInfo.pi);\n\n          if (!found) {\n            let temp = {\n              value: spInfo.pi,\n              label: \"PI_\" + spInfo.pi,\n            };\n            this.state.pis.push(temp);\n            this.SortPIList();\n            this.setState({ isPIsLoaded: statusComplete });\n          }\n\n          let Velocity = JSON.parse(JSON.stringify(this.state.Velocity));\n\n          Velocity.options.labels[index] = sprint;\n          Velocity.options.scales.xAxes[0].labels[index] = sprint;\n\n          Velocity.datasets[1].data[index] = spInfo.spPlanned;\n          Velocity.datasets[2].data[index] = spInfo.spBurnt;\n          Velocity.datasets[3].data[index] = spInfo.bbAccuracy;\n\n          this.setState({ Velocity: Velocity });\n        } else {\n          invalidVelocityDataCount++;\n        }\n\n        if (\n          sprints.length &&\n          invalidVelocityDataCount !== sprints.length &&\n          sprints.length ===\n            this.state.Velocity.datasets[2].data.filter(Boolean).length +\n              invalidVelocityDataCount\n        ) {\n          let Velocity = JSON.parse(JSON.stringify(this.state.Velocity));\n\n          // remove empty element if any. Empty element is due to some sprints not having SP info. This is to align the array\n\n          Velocity.options.scales.xAxes[0].labels = Velocity.options.labels = Velocity.options.labels.filter(\n            function (el) {\n              return el != null;\n            }\n          );\n\n          Velocity.datasets[1].data = Velocity.datasets[1].data.filter(\n            function (el) {\n              return el != null;\n            }\n          );\n\n          Velocity.datasets[2].data = Velocity.datasets[2].data.filter(\n            function (el) {\n              return el != null;\n            }\n          );\n          Velocity.datasets[3].data = Velocity.datasets[3].data.filter(\n            function (el) {\n              return el != null;\n            }\n          );\n\n          this.setState({ Velocity: Velocity });\n\n          this.state.Velocity.options.labels.forEach((sprint, index) => {\n            let avgVelocity = 0;\n            let totalSPBurnt = 0;\n\n            for (let startIndex = 0; startIndex <= index; startIndex++) {\n              totalSPBurnt += parseInt(\n                this.state.Velocity.datasets[2].data[startIndex],\n                10\n              );\n            }\n\n            avgVelocity = parseFloat(totalSPBurnt / (index + 1)).toFixed(2);\n\n            let Velocity = JSON.parse(JSON.stringify(this.state.Velocity));\n\n            Velocity.datasets[0].data[index] = avgVelocity;\n\n            this.setState({ Velocity: Velocity });\n          });\n\n          this.setState({ isVelocityLoaded: statusComplete });\n        } else if (invalidVelocityDataCount === sprints.length) {\n          this.setState({ isVelocityLoaded: statusIncomplete });\n        }\n      });\n    }\n  };\n\n  updateHapinessList = async (teamName, sprints) => {\n    if (teamName !== teamNameToIgnore && sprints.length) {\n      invalidHappinessDataCount = 0;\n\n      sprints.forEach(async (sprint, index) => {\n        this.setState({ isHappinessLoaded: statusLoading });\n\n        let jsonObj = {\n          params: {\n            team: teamName,\n            sprint: sprint,\n          },\n        };\n\n        let happiness = await this.getAvgHappiness(jsonObj);\n\n        if (!isNaN(happiness)) {\n          let Happiness = JSON.parse(JSON.stringify(this.state.Happiness));\n          Happiness.labels[index] = sprint;\n          Happiness.datasets[0].data[index] = happiness;\n\n          this.setState({ Happiness: Happiness });\n        } else {\n          invalidHappinessDataCount++;\n        }\n\n        if (\n          sprints.length &&\n          sprints.length !== invalidHappinessDataCount &&\n          sprints.length ===\n            this.state.Happiness.datasets[0].data.filter(Boolean).length +\n              invalidHappinessDataCount\n        ) {\n          // this is to remove null from the array\n          let Happiness = JSON.parse(JSON.stringify(this.state.Happiness));\n          Happiness.labels = Happiness.labels.filter(function (el) {\n            return el != null;\n          });\n\n          // this is to remove null from the array\n          Happiness.datasets[0].data = Happiness.datasets[0].data.filter(\n            function (el) {\n              return el != null;\n            }\n          );\n\n          Happiness.labels.forEach((sprint, curIndex) => {\n            let liveAvgHappiness = 0;\n            let sumHappiness = 0;\n\n            for (let startIndex = 0; startIndex <= curIndex; startIndex++) {\n              sumHappiness += parseFloat(\n                Happiness.datasets[0].data[startIndex],\n                10\n              );\n            }\n\n            liveAvgHappiness = parseFloat(\n              sumHappiness / (curIndex + 1)\n            ).toFixed(2);\n\n            Happiness.datasets[1].data[curIndex] = liveAvgHappiness;\n          });\n\n          this.setState({ Happiness: Happiness });\n\n          this.setState({\n            isHappinessLoaded: statusComplete,\n          });\n        } else if (sprints.length === invalidHappinessDataCount) {\n          this.setState({ isHappinessLoaded: statusIncomplete });\n        }\n      });\n    }\n  };\n\n  DecideTheText() {\n    if (this.props.teamName === teamNameToIgnore) {\n      return (\n        <div>\n          {\" \"}\n          <h2> Select A Team To Proceed </h2>{\" \"}\n        </div>\n      );\n    } else if (\n      this.props.teamName !== teamNameToIgnore &&\n      !this.state.sprints.length\n    ) {\n      return (\n        <div>\n          {\" \"}\n          <h2> Create Sprint To Proceed </h2>{\" \"}\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col lg=\"6\">\n            <div>\n              {\" \"}\n              {this.state.isHappinessLoaded === statusComplete ? (\n                <Line\n                  ref=\"chart\"\n                  data={this.state.Happiness}\n                  height={300}\n                  options={this.state.Happiness.options}\n                />\n              ) : this.state.isHappinessLoaded === statusIncomplete ? (\n                <div>\n                  {\" \"}\n                  <h2> No Sprint With Valid Happiness Information </h2>{\" \"}\n                </div>\n              ) : this.state.isHappinessLoaded === statusLoading ? (\n                <div>\n                  {\" \"}\n                  <h2> Happiness Trend Is Loading... </h2>{\" \"}\n                </div>\n              ) : (\n                this.DecideTheText()\n              )}{\" \"}\n            </div>{\" \"}\n          </Col>{\" \"}\n          <Col lg>\n            {\" \"}\n            <div>\n              {\" \"}\n              {this.state.isVelocityLoaded === statusComplete ? (\n                <Bar\n                  data={this.state.Velocity}\n                  options={this.state.Velocity.options}\n                />\n              ) : this.state.isVelocityLoaded === statusIncomplete ? (\n                <div>\n                  {\" \"}\n                  <h2> No Sprint With Valid SP Data </h2>{\" \"}\n                </div>\n              ) : this.state.isVelocityLoaded === statusLoading ? (\n                <div>\n                  {\" \"}\n                  <h2> Velocity Chart Loading... </h2>{\" \"}\n                </div>\n              ) : (\n                <div> {} </div>\n              )}{\" \"}\n            </div>{\" \"}\n            {this.state.isPIsLoaded === statusComplete ? (\n              <Select\n                placeholder=\"Select PI To Filter\"\n                value={this.selectedOption}\n                onChange={this.handleSelection}\n                options={this.state.pis}\n              ></Select>\n            ) : (\n              <div> {} </div>\n            )}{\" \"}\n          </Col>{\" \"}\n        </Row>{\" \"}\n      </Container>\n    );\n  }\n}\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}