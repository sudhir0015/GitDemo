{"ast":null,"code":"var _jsxFileName = \"/home/pradhant/caruso/panda-board/Client/src/Components/Header.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Col from \"react-bootstrap/Col\";\nimport Config from \"../Configuration\";\nimport PubSub from 'pubsub-js';\nconst teamNameToIgnore = \"http:\";\n\nfunction Header() {\n  const [totalVote, updateVote] = useState(\"\");\n  useEffect(() => {\n    updateVoteCountForASprint(Config.getTeamName(), Config.getSprintName());\n  }, []);\n\n  var mySubscriber = function (msg, data) {\n    console.log(\"Callback received ....\");\n    updateVoteCountForASprint(Config.getTeamName(), Config.getSprintName());\n  };\n\n  var token = PubSub.subscribe('Change In Vote', mySubscriber);\n\n  const updateVoteCountForASprint = async (teamName, sprintName) => {\n    if (teamName !== teamNameToIgnore) {\n      let reqData = {\n        params: {\n          team: teamName,\n          sprint: sprintName\n        }\n      };\n      Config.getAxiosInstance().get(\"checkIfVotingAllowed\", reqData).then(result => {\n        updateVote(result.data[2]);\n      });\n    }\n  };\n\n  function checkIfVoteCountShouldBeDisplayed() {\n    const regEx = RegExp(\".+/team/.*/sprint/.*\");\n    let validBoard = regEx.test(window.location.href);\n\n    if (validBoard) {\n      updateVoteCountForASprint(Config.getTeamName(), Config.getSprintName());\n      return /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        class: \"float-right\",\n        style: {\n          padding: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        style: {\n          backgroundColor: 'Red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, \"Vote Count \" + totalVote)))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 10\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    bg: \"light\",\n    variant: \"green\",\n    width: \"30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Navbar.Brand, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-paw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }\n  }), \"PandaBoard\"), checkIfVoteCountShouldBeDisplayed()));\n}\n\nexport default Header;","map":{"version":3,"sources":["/home/pradhant/caruso/panda-board/Client/src/Components/Header.js"],"names":["React","useState","useEffect","Navbar","Col","Config","PubSub","teamNameToIgnore","Header","totalVote","updateVote","updateVoteCountForASprint","getTeamName","getSprintName","mySubscriber","msg","data","console","log","token","subscribe","teamName","sprintName","reqData","params","team","sprint","getAxiosInstance","get","then","result","checkIfVoteCountShouldBeDisplayed","regEx","RegExp","validBoard","test","window","location","href","padding","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,gBAAgB,GAAG,OAAzB;;AAGA,SAASC,MAAT,GAAkB;AAEjB,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,yBAAyB,CAACN,MAAM,CAACO,WAAP,EAAD,EAAuBP,MAAM,CAACQ,aAAP,EAAvB,CAAzB;AACA,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAIC,YAAY,GAAG,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAP,IAAAA,yBAAyB,CAACN,MAAM,CAACO,WAAP,EAAD,EAAuBP,MAAM,CAACQ,aAAP,EAAvB,CAAzB;AACA,GAHD;;AAKA,MAAIM,KAAK,GAAGb,MAAM,CAACc,SAAP,CAAiB,gBAAjB,EAAmCN,YAAnC,CAAZ;;AAEA,QAAMH,yBAAyB,GAAG,OAAOU,QAAP,EAAiBC,UAAjB,KAAgC;AAEjE,QAAID,QAAQ,KAAKd,gBAAjB,EAAmC;AAClC,UAAIgB,OAAO,GAAG;AACbC,QAAAA,MAAM,EAAE;AACPC,UAAAA,IAAI,EAAEJ,QADC;AAEPK,UAAAA,MAAM,EAAEJ;AAFD;AADK,OAAd;AAMAjB,MAAAA,MAAM,CAACsB,gBAAP,GAA0BC,GAA1B,CAA8B,sBAA9B,EAAsDL,OAAtD,EAA+DM,IAA/D,CAAoEC,MAAM,IAAI;AAC7EpB,QAAAA,UAAU,CAACoB,MAAM,CAACd,IAAP,CAAY,CAAZ,CAAD,CAAV;AACA,OAFD;AAGA;AACD,GAbD;;AAeA,WAASe,iCAAT,GAA6C;AAC5C,UAAMC,KAAK,GAAGC,MAAM,CAAC,sBAAD,CAApB;AACA,QAAIC,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAAM,CAACC,QAAP,CAAgBC,IAA3B,CAAjB;;AAEA,QAAIJ,UAAJ,EAAgB;AACfvB,MAAAA,yBAAyB,CAACN,MAAM,CAACO,WAAP,EAAD,EAAuBP,MAAM,CAACQ,aAAP,EAAvB,CAAzB;AAEA,0BAAO,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM;AAAK,QAAA,KAAK,EAAC,aAAX;AAAyB,QAAA,KAAK,EAAE;AAAE0B,UAAAA,OAAO,EAAE;AAAX,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACZ;AAAM,QAAA,KAAK,EAAE;AACZC,UAAAA,eAAe,EAAE;AADL,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,gBAAgB/B,SAArB,CAAL,CAFH,CADY,CAAN,eAID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJC,CAAP;AAKA;AACD;;AAED,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAmB,IAAA,OAAO,EAAC,OAA3B;AAAmC,IAAA,KAAK,EAAC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,MAAD,CAAQ,KAAR;AAAc,IAAA,IAAI,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAG,IAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eADD,EAKEsB,iCAAiC,EALnC,CADD,CADD;AAWA;;AAED,eAAevB,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport Col from \"react-bootstrap/Col\";\nimport Config from \"../Configuration\";\nimport PubSub from 'pubsub-js'\n\nconst teamNameToIgnore = \"http:\";\n\n\nfunction Header() {\n\n\tconst [totalVote, updateVote] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tupdateVoteCountForASprint(Config.getTeamName(), Config.getSprintName());\n\t}, []);\n\n\tvar mySubscriber = function (msg, data) {\n\t\tconsole.log(\"Callback received ....\");\n\t\tupdateVoteCountForASprint(Config.getTeamName(), Config.getSprintName());\n\t};\n\n\tvar token = PubSub.subscribe('Change In Vote', mySubscriber);\n\n\tconst updateVoteCountForASprint = async (teamName, sprintName) => {\n\n\t\tif (teamName !== teamNameToIgnore) {\n\t\t\tlet reqData = {\n\t\t\t\tparams: {\n\t\t\t\t\tteam: teamName,\n\t\t\t\t\tsprint: sprintName\n\t\t\t\t},\n\t\t\t};\n\t\t\tConfig.getAxiosInstance().get(\"checkIfVotingAllowed\", reqData).then(result => {\n\t\t\t\tupdateVote(result.data[2]);\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction checkIfVoteCountShouldBeDisplayed() {\n\t\tconst regEx = RegExp(\".+/team/.*/sprint/.*\");\n\t\tlet validBoard = regEx.test(window.location.href);\n\n\t\tif (validBoard) {\n\t\t\tupdateVoteCountForASprint(Config.getTeamName(), Config.getSprintName());\n\n\t\t\treturn <Col> <div class=\"float-right\" style={{ padding: 10 }}>\n\t\t\t\t<form style={{\n\t\t\t\t\tbackgroundColor: 'Red',\n\t\t\t\t}}><Col><h2>{\"Vote Count \" + totalVote}</h2></Col></form>\n\t\t\t</div><br /></Col>\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar bg=\"light\" variant=\"green\" width=\"30\">\n\t\t\t\t<Navbar.Brand href=\"/\">\n\t\t\t\t\t<i className=\"fas fa-paw\" />\n\t\t\t\tPandaBoard\n\t\t\t</Navbar.Brand>\n\t\t\t\t{checkIfVoteCountShouldBeDisplayed()}\n\t\t\t</Navbar>\n\t\t</div >\n\t)\n}\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}